/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TOKENInterface extends utils.Interface {
  functions: {
    "DAO()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_automatedMarketMakerPairs(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistDAO(address,bool)": FunctionFragment;
    "burnDAO(address,uint256)": FunctionFragment;
    "buyingFee()": FunctionFragment;
    "changeDAO(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableSwappingDAO()": FunctionFragment;
    "excludeFromFeesDAO(address,bool)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialSupply()": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "liquidityFeeBalance()": FunctionFragment;
    "manualLiquifyDAO()": FunctionFragment;
    "manualSafeFeeSwapDAO()": FunctionFragment;
    "minimumLiquidityFeeBalanceToSwap()": FunctionFragment;
    "minimumSafeWalletBalanceToSwap()": FunctionFragment;
    "mintDAO(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeRouter()": FunctionFragment;
    "pancakeTokenBnbPair()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeDAO(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeFeePercentage()": FunctionFragment;
    "safeWallet()": FunctionFragment;
    "safeWalletBalance()": FunctionFragment;
    "sellingFee()": FunctionFragment;
    "setAutomatedMarketMakerPairDAO(address,bool)": FunctionFragment;
    "setBuyingFeeDAO(uint256)": FunctionFragment;
    "setMinimumLiquidityFeeBalanceToSwapDAO(uint256)": FunctionFragment;
    "setMinimumSafeWalletBalanceToSwapDAO(uint256)": FunctionFragment;
    "setSafeFeePercentageDAO(uint256)": FunctionFragment;
    "setSafeWalletDAO(address)": FunctionFragment;
    "setSellingFeeDAO(uint256)": FunctionFragment;
    "stopSwappingDAO()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapEnabled()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenDAO()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawDAO(uint256)": FunctionFragment;
    "withdrawERC20DAO(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistDAO",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "burnDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyingFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeDAO", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enableSwappingDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFeesDAO",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualLiquifyDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualSafeFeeSwapDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumLiquidityFeeBalanceToSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSafeWalletBalanceToSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintDAO",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeTokenBnbPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "revokeDAO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeWalletBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPairDAO",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingFeeDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumLiquidityFeeBalanceToSwapDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumSafeWalletBalanceToSwapDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeFeePercentageDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSafeWalletDAO",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSellingFeeDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stopSwappingDAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenDAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20DAO",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "DAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableSwappingDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFeesDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualLiquifyDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualSafeFeeSwapDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumLiquidityFeeBalanceToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSafeWalletBalanceToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeTokenBnbPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeWalletBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPairDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingFeeDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumLiquidityFeeBalanceToSwapDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumSafeWalletBalanceToSwapDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeFeePercentageDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSafeWalletDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSellingFeeDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopSwappingDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20DAO",
    data: BytesLike
  ): Result;

  events: {
    "AddedLiquidity(uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SwappedSafeWalletBalance(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwappedSafeWalletBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AddedLiquidityEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenAmount: BigNumber; bnbAmount: BigNumber }
>;

export type AddedLiquidityEventFilter = TypedEventFilter<AddedLiquidityEvent>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SwappedSafeWalletBalanceEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type SwappedSafeWalletBalanceEventFilter =
  TypedEventFilter<SwappedSafeWalletBalanceEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TOKEN extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TOKENInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAO(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistDAO(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnDAO(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeDAO(
      _newDAO: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    excludeFromFeesDAO(
      _account: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    isBlacklisted(_user: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidityFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    manualLiquifyDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    manualSafeFeeSwapDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumLiquidityFeeBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minimumSafeWalletBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintDAO(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeRouter(overrides?: CallOverrides): Promise<[string]>;

    pancakeTokenBnbPair(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeDAO(
      _DaoToRevoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeWallet(overrides?: CallOverrides): Promise<[string]>;

    safeWalletBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAutomatedMarketMakerPairDAO(
      _pair: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuyingFeeDAO(
      _buyingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumLiquidityFeeBalanceToSwapDAO(
      _minimumLiquidityFeeBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumSafeWalletBalanceToSwapDAO(
      _minimumSafeWalletBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafeFeePercentageDAO(
      _safeFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSafeWalletDAO(
      _safeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSellingFeeDAO(
      _sellingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenDAO(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDAO(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20DAO(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAO(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistDAO(
    _user: string,
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnDAO(
    _from: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyingFee(overrides?: CallOverrides): Promise<BigNumber>;

  changeDAO(
    _newDAO: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableSwappingDAO(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  excludeFromFeesDAO(
    _account: string,
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

  isBlacklisted(_user: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  manualLiquifyDAO(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  manualSafeFeeSwapDAO(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumLiquidityFeeBalanceToSwap(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minimumSafeWalletBalanceToSwap(overrides?: CallOverrides): Promise<BigNumber>;

  mintDAO(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeRouter(overrides?: CallOverrides): Promise<string>;

  pancakeTokenBnbPair(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeDAO(
    _DaoToRevoke: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  safeWallet(overrides?: CallOverrides): Promise<string>;

  safeWalletBalance(overrides?: CallOverrides): Promise<BigNumber>;

  sellingFee(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPairDAO(
    _pair: string,
    _value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuyingFeeDAO(
    _buyingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumLiquidityFeeBalanceToSwapDAO(
    _minimumLiquidityFeeBalanceToSwap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumSafeWalletBalanceToSwapDAO(
    _minimumSafeWalletBalanceToSwap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafeFeePercentageDAO(
    _safeFeePercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSafeWalletDAO(
    _safeWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSellingFeeDAO(
    _sellingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopSwappingDAO(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapEnabled(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenDAO(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDAO(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20DAO(
    _erc20: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAO(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistDAO(
      _user: string,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    burnDAO(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyingFee(overrides?: CallOverrides): Promise<BigNumber>;

    changeDAO(_newDAO: string, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableSwappingDAO(overrides?: CallOverrides): Promise<void>;

    excludeFromFeesDAO(
      _account: string,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isBlacklisted(_user: string, overrides?: CallOverrides): Promise<boolean>;

    liquidityFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    manualLiquifyDAO(overrides?: CallOverrides): Promise<void>;

    manualSafeFeeSwapDAO(overrides?: CallOverrides): Promise<void>;

    minimumLiquidityFeeBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumSafeWalletBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintDAO(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeRouter(overrides?: CallOverrides): Promise<string>;

    pancakeTokenBnbPair(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeDAO(_DaoToRevoke: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    safeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    safeWallet(overrides?: CallOverrides): Promise<string>;

    safeWalletBalance(overrides?: CallOverrides): Promise<BigNumber>;

    sellingFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPairDAO(
      _pair: string,
      _value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuyingFeeDAO(
      _buyingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumLiquidityFeeBalanceToSwapDAO(
      _minimumLiquidityFeeBalanceToSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumSafeWalletBalanceToSwapDAO(
      _minimumSafeWalletBalanceToSwap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafeFeePercentageDAO(
      _safeFeePercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSafeWalletDAO(
      _safeWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSellingFeeDAO(
      _sellingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stopSwappingDAO(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapEnabled(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenDAO(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDAO(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20DAO(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedLiquidity(uint256,uint256)"(
      tokenAmount?: null,
      bnbAmount?: null
    ): AddedLiquidityEventFilter;
    AddedLiquidity(
      tokenAmount?: null,
      bnbAmount?: null
    ): AddedLiquidityEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SwappedSafeWalletBalance(uint256)"(
      amount?: null
    ): SwappedSafeWalletBalanceEventFilter;
    SwappedSafeWalletBalance(
      amount?: null
    ): SwappedSafeWalletBalanceEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DAO(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistDAO(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnDAO(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyingFee(overrides?: CallOverrides): Promise<BigNumber>;

    changeDAO(
      _newDAO: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    excludeFromFeesDAO(
      _account: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialSupply(overrides?: CallOverrides): Promise<BigNumber>;

    isBlacklisted(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    manualLiquifyDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    manualSafeFeeSwapDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumLiquidityFeeBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumSafeWalletBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintDAO(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeTokenBnbPair(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeDAO(
      _DaoToRevoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    safeWallet(overrides?: CallOverrides): Promise<BigNumber>;

    safeWalletBalance(overrides?: CallOverrides): Promise<BigNumber>;

    sellingFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPairDAO(
      _pair: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuyingFeeDAO(
      _buyingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumLiquidityFeeBalanceToSwapDAO(
      _minimumLiquidityFeeBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumSafeWalletBalanceToSwapDAO(
      _minimumSafeWalletBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafeFeePercentageDAO(
      _safeFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSafeWalletDAO(
      _safeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSellingFeeDAO(
      _sellingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDAO(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDAO(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20DAO(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistDAO(
      _user: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnDAO(
      _from: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeDAO(
      _newDAO: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    excludeFromFeesDAO(
      _account: string,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlacklisted(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityFeeBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualLiquifyDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    manualSafeFeeSwapDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumLiquidityFeeBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumSafeWalletBalanceToSwap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintDAO(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeTokenBnbPair(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeDAO(
      _DaoToRevoke: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeWalletBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPairDAO(
      _pair: string,
      _value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuyingFeeDAO(
      _buyingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumLiquidityFeeBalanceToSwapDAO(
      _minimumLiquidityFeeBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumSafeWalletBalanceToSwapDAO(
      _minimumSafeWalletBalanceToSwap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafeFeePercentageDAO(
      _safeFeePercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSafeWalletDAO(
      _safeWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSellingFeeDAO(
      _sellingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopSwappingDAO(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDAO(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20DAO(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
