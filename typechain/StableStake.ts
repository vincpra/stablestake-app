/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DepositEntityStruct = {
  depositType: BigNumberish;
  depositSize: BigNumberish;
  creationTime: BigNumberish;
  lastClaimTime: BigNumberish;
};

export type DepositEntityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  depositType: BigNumber;
  depositSize: BigNumber;
  creationTime: BigNumber;
  lastClaimTime: BigNumber;
};

export interface StableStakeInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAXIMUM_DEPOSITS_PER_ACCOUNT()": FunctionFragment;
    "airdropAffiliateInterest(address,uint256)": FunctionFragment;
    "airdropAffiliateInterests(address[],uint256)": FunctionFragment;
    "airdropDeposit(address,uint256,uint256)": FunctionFragment;
    "airdropDeposits(address[],uint256,uint256)": FunctionFragment;
    "blacklist(address,bool)": FunctionFragment;
    "cashoutAllDeposits()": FunctionFragment;
    "cashoutAllInterests()": FunctionFragment;
    "cashoutAndCompound(uint256)": FunctionFragment;
    "cashoutAndCompoundAll()": FunctionFragment;
    "cashoutDeposit(uint256)": FunctionFragment;
    "cashoutInterest(uint256)": FunctionFragment;
    "compoundAffiliateInterests()": FunctionFragment;
    "createDepositWithTokens(uint256,uint256,address)": FunctionFragment;
    "createNewDepositType(uint256,uint256,uint256,uint256)": FunctionFragment;
    "exemptAddressFromFees(address,bool)": FunctionFragment;
    "feesWallet()": FunctionFragment;
    "getAccountAffiliateRewardsUnlockTime(address)": FunctionFragment;
    "getAccountCreationTimes(address)": FunctionFragment;
    "getAccountDepositSizes(address)": FunctionFragment;
    "getAccountDepositedValue(address)": FunctionFragment;
    "getAccountInterestAvailable(address)": FunctionFragment;
    "getAccountInterestAvailableAsArray(address)": FunctionFragment;
    "getAccountLastClaimTimes(address)": FunctionFragment;
    "getAccountNextInterestTimes(address)": FunctionFragment;
    "getAccountTypes(address)": FunctionFragment;
    "getAccountUnlockTime(address)": FunctionFragment;
    "getAffiliateCount(address)": FunctionFragment;
    "getAffiliateInterestsAvailability(address)": FunctionFragment;
    "getAffiliateInterestsAvailable(address)": FunctionFragment;
    "getDeposit(address,uint256)": FunctionFragment;
    "getDepositCount(address)": FunctionFragment;
    "getDepositCreationTime(address,uint256)": FunctionFragment;
    "getDepositInterestAvailable(address,uint256)": FunctionFragment;
    "getDepositLastClaimTime(address,uint256)": FunctionFragment;
    "getDepositType(address,uint256)": FunctionFragment;
    "getInterestInterval(uint256)": FunctionFragment;
    "getInterestIntervals()": FunctionFragment;
    "getIsAccountAffiliateRewardsUnlocked(address)": FunctionFragment;
    "getIsAccountUnlocked(address)": FunctionFragment;
    "getLockPeriod(uint256)": FunctionFragment;
    "getLockPeriods()": FunctionFragment;
    "getMultiplier(uint256)": FunctionFragment;
    "getMultipliers()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTimeUntilAccountAffiliateRewardsUnlockTime(address)": FunctionFragment;
    "getTimeUntilAccountUnlockTime(address)": FunctionFragment;
    "getTotalDepositedAmount()": FunctionFragment;
    "getTotalDepositsCreated()": FunctionFragment;
    "getTotalEarnedAmount()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "investmentWallet()": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isCashoutPaused()": FunctionFragment;
    "isDepositCreationPaused()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseCashout(bool)": FunctionFragment;
    "pauseDepositCreation(bool)": FunctionFragment;
    "removeDepositType()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sendFeeBalance()": FunctionFragment;
    "setCashoutFee(uint256)": FunctionFragment;
    "setCreateDepositFee(uint256)": FunctionFragment;
    "setFeesWallet(address)": FunctionFragment;
    "setInvestmentWallet(address)": FunctionFragment;
    "setMaximumDepositAmount(uint256)": FunctionFragment;
    "setMaximumFirstDepositAmount(uint256)": FunctionFragment;
    "setMinimumFeeBalanceToSend(uint256)": FunctionFragment;
    "setSponsorFee(uint256)": FunctionFragment;
    "setSupportedToken(address)": FunctionFragment;
    "setVestingPeriodOfAffiliateInterests(uint256)": FunctionFragment;
    "supportedToken()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalDepositTypes()": FunctionFragment;
    "totalDepositedAmount()": FunctionFragment;
    "totalDepositsCreated()": FunctionFragment;
    "totalEarnedAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateDepositLastClaimTime(address,uint256,uint256)": FunctionFragment;
    "updateDepositSize(address,uint256,uint256)": FunctionFragment;
    "updateDepositType(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_DEPOSITS_PER_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "airdropAffiliateInterest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropAffiliateInterests",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropDeposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "airdropDeposits",
    values: [string[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutAllDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutAllInterests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutAndCompound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutAndCompoundAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cashoutInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundAffiliateInterests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDepositWithTokens",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewDepositType",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptAddressFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "feesWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAffiliateRewardsUnlockTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCreationTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDepositSizes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDepositedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInterestAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInterestAvailableAsArray",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLastClaimTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountNextInterestTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountTypes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountUnlockTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateInterestsAvailability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAffiliateInterestsAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCreationTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositInterestAvailable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositLastClaimTime",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositType",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestIntervals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsAccountAffiliateRewardsUnlocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsAccountUnlocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockPeriods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilAccountAffiliateRewardsUnlockTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilAccountUnlockTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDepositsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEarnedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "investmentWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCashoutPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositCreationPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseCashout",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDepositCreation",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDepositType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCashoutFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreateDepositFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInvestmentWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumFirstDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumFeeBalanceToSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSponsorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingPeriodOfAffiliateInterests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEarnedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositLastClaimTime",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositSize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositType",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_DEPOSITS_PER_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropAffiliateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropAffiliateInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "airdropDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cashoutAllDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashoutAllInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashoutAndCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashoutAndCompoundAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashoutDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cashoutInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundAffiliateInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDepositWithTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewDepositType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptAddressFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feesWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAffiliateRewardsUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCreationTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDepositSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDepositedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInterestAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInterestAvailableAsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLastClaimTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountNextInterestTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateInterestsAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAffiliateInterestsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCreationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositInterestAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositLastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestIntervals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsAccountAffiliateRewardsUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsAccountUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilAccountAffiliateRewardsUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilAccountUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDepositsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEarnedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investmentWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCashoutPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositCreationPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseCashout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDepositCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDepositType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCashoutFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreateDepositFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInvestmentWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumFirstDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumFeeBalanceToSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSponsorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingPeriodOfAffiliateInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEarnedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositLastClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;

  events: {
    "DepositEntityCreated(address,uint256,uint256,uint256)": EventFragment;
    "DepositTypeDeleted(uint256)": EventFragment;
    "DepositTypeUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SentFeeBalance(uint256)": EventFragment;
    "SupportedTokenClaimed(address,uint256,uint256)": EventFragment;
    "SupportedTokenCompounded(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositEntityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTypeDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositTypeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentFeeBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokenClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedTokenCompounded"): EventFragment;
}

export type DepositEntityCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    account: string;
    depositType: BigNumber;
    depositSize: BigNumber;
    creationTime: BigNumber;
  }
>;

export type DepositEntityCreatedEventFilter =
  TypedEventFilter<DepositEntityCreatedEvent>;

export type DepositTypeDeletedEvent = TypedEvent<
  [BigNumber],
  { depositType: BigNumber }
>;

export type DepositTypeDeletedEventFilter =
  TypedEventFilter<DepositTypeDeletedEvent>;

export type DepositTypeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositType: BigNumber;
    lockPeriod: BigNumber;
    multiplier: BigNumber;
    interestInterval: BigNumber;
    depositInterestPerPeriod: BigNumber;
  }
>;

export type DepositTypeUpdatedEventFilter =
  TypedEventFilter<DepositTypeUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SentFeeBalanceEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type SentFeeBalanceEventFilter = TypedEventFilter<SentFeeBalanceEvent>;

export type SupportedTokenClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { account: string; amount: BigNumber; claimTime: BigNumber }
>;

export type SupportedTokenClaimedEventFilter =
  TypedEventFilter<SupportedTokenClaimedEvent>;

export type SupportedTokenCompoundedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    account: string;
    depositIndex: BigNumber;
    amount: BigNumber;
    compoundTime: BigNumber;
  }
>;

export type SupportedTokenCompoundedEventFilter =
  TypedEventFilter<SupportedTokenCompoundedEvent>;

export interface StableStake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StableStakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MAXIMUM_DEPOSITS_PER_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    airdropAffiliateInterest(
      _account: string,
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropAffiliateInterests(
      _accounts: string[],
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropDeposit(
      _account: string,
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdropDeposits(
      _accounts: string[],
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklist(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutAllDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutAllInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutAndCompound(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutAndCompoundAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutDeposit(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashoutInterest(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    compoundAffiliateInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createDepositWithTokens(
      _depositSize: BigNumberish,
      _depositType: BigNumberish,
      _sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewDepositType(
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exemptAddressFromFees(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feesWallet(overrides?: CallOverrides): Promise<[string]>;

    getAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountCreationTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountDepositSizes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountDepositedValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountInterestAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountInterestAvailableAsArray(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountLastClaimTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountNextInterestTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountTypes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAffiliateCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAffiliateInterestsAvailability(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAffiliateInterestsAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeposit(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DepositEntityStructOutput]>;

    getDepositCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositCreationTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositInterestAvailable(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositType(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestInterval(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestIntervals(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getIsAccountAffiliateRewardsUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsAccountUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLockPeriod(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLockPeriods(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getMultiplier(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultipliers(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTimeUntilAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTimeUntilAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDepositedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDepositsCreated(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalEarnedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    investmentWallet(overrides?: CallOverrides): Promise<[string]>;

    isBlacklisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCashoutPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isDepositCreationPaused(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseCashout(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseDepositCreation(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeDepositType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendFeeBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCashoutFee(
      _cashoutFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCreateDepositFee(
      _createDepositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeesWallet(
      _feesWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInvestmentWallet(
      _investmentWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumDepositAmount(
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaximumFirstDepositAmount(
      _maximumFirstDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumFeeBalanceToSend(
      _minimumFeeBalanceToSend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSponsorFee(
      _sponsorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupportedToken(
      _supportedTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVestingPeriodOfAffiliateInterests(
      _vestingPeriodOfAffiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedToken(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalDepositTypes(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDepositsCreated(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalEarnedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      _lastClaimTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDepositSize(
      _account: string,
      _depositIndex: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDepositType(
      _depositType: BigNumberish,
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MAXIMUM_DEPOSITS_PER_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  airdropAffiliateInterest(
    _account: string,
    _affiliateInterests: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropAffiliateInterests(
    _accounts: string[],
    _affiliateInterests: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropDeposit(
    _account: string,
    _depositType: BigNumberish,
    _depositSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdropDeposits(
    _accounts: string[],
    _depositType: BigNumberish,
    _depositSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklist(
    _address: string,
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutAllDeposits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutAllInterests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutAndCompound(
    _depositIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutAndCompoundAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutDeposit(
    _depositIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashoutInterest(
    _depositIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  compoundAffiliateInterests(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createDepositWithTokens(
    _depositSize: BigNumberish,
    _depositType: BigNumberish,
    _sponsor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewDepositType(
    _lockPeriod: BigNumberish,
    _minimalDeposit: BigNumberish,
    _multiplier: BigNumberish,
    _interestInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exemptAddressFromFees(
    _address: string,
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feesWallet(overrides?: CallOverrides): Promise<string>;

  getAccountAffiliateRewardsUnlockTime(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountCreationTimes(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountDepositSizes(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountDepositedValue(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountInterestAvailable(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountInterestAvailableAsArray(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountLastClaimTimes(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountNextInterestTimes(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountTypes(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAccountUnlockTime(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAffiliateCount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAffiliateInterestsAvailability(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAffiliateInterestsAvailable(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeposit(
    _account: string,
    _depositIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DepositEntityStructOutput>;

  getDepositCount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositCreationTime(
    _account: string,
    _depositIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositInterestAvailable(
    _account: string,
    _depositIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositLastClaimTime(
    _account: string,
    _depositIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositType(
    _account: string,
    _depositIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestInterval(
    _depositType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestIntervals(overrides?: CallOverrides): Promise<BigNumber[]>;

  getIsAccountAffiliateRewardsUnlocked(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsAccountUnlocked(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLockPeriod(
    _depositType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockPeriods(overrides?: CallOverrides): Promise<BigNumber[]>;

  getMultiplier(
    _depositType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTimeUntilAccountAffiliateRewardsUnlockTime(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTimeUntilAccountUnlockTime(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  investmentWallet(overrides?: CallOverrides): Promise<string>;

  isBlacklisted(_address: string, overrides?: CallOverrides): Promise<boolean>;

  isCashoutPaused(overrides?: CallOverrides): Promise<boolean>;

  isDepositCreationPaused(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseCashout(
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseDepositCreation(
    _bool: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeDepositType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendFeeBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCashoutFee(
    _cashoutFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCreateDepositFee(
    _createDepositFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeesWallet(
    _feesWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInvestmentWallet(
    _investmentWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumDepositAmount(
    _maximumDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaximumFirstDepositAmount(
    _maximumFirstDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumFeeBalanceToSend(
    _minimumFeeBalanceToSend: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSponsorFee(
    _sponsorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupportedToken(
    _supportedTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVestingPeriodOfAffiliateInterests(
    _vestingPeriodOfAffiliateInterests: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedToken(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalDepositTypes(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

  totalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDepositLastClaimTime(
    _account: string,
    _depositIndex: BigNumberish,
    _lastClaimTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDepositSize(
    _account: string,
    _depositIndex: BigNumberish,
    _depositSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDepositType(
    _depositType: BigNumberish,
    _lockPeriod: BigNumberish,
    _minimalDeposit: BigNumberish,
    _multiplier: BigNumberish,
    _interestInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _erc20: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MAXIMUM_DEPOSITS_PER_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    airdropAffiliateInterest(
      _account: string,
      _affiliateInterests: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropAffiliateInterests(
      _accounts: string[],
      _affiliateInterests: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropDeposit(
      _account: string,
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    airdropDeposits(
      _accounts: string[],
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklist(
      _address: string,
      _bool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cashoutAllDeposits(overrides?: CallOverrides): Promise<void>;

    cashoutAllInterests(overrides?: CallOverrides): Promise<void>;

    cashoutAndCompound(
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cashoutAndCompoundAll(overrides?: CallOverrides): Promise<void>;

    cashoutDeposit(
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cashoutInterest(
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    compoundAffiliateInterests(overrides?: CallOverrides): Promise<void>;

    createDepositWithTokens(
      _depositSize: BigNumberish,
      _depositType: BigNumberish,
      _sponsor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewDepositType(
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exemptAddressFromFees(
      _address: string,
      _bool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    feesWallet(overrides?: CallOverrides): Promise<string>;

    getAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCreationTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountDepositSizes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountDepositedValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInterestAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInterestAvailableAsArray(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountLastClaimTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountNextInterestTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountTypes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffiliateCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffiliateInterestsAvailability(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAffiliateInterestsAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposit(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DepositEntityStructOutput>;

    getDepositCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCreationTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositInterestAvailable(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositType(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestInterval(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestIntervals(overrides?: CallOverrides): Promise<BigNumber[]>;

    getIsAccountAffiliateRewardsUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsAccountUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLockPeriod(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockPeriods(overrides?: CallOverrides): Promise<BigNumber[]>;

    getMultiplier(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipliers(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTimeUntilAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUntilAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    investmentWallet(overrides?: CallOverrides): Promise<string>;

    isBlacklisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCashoutPaused(overrides?: CallOverrides): Promise<boolean>;

    isDepositCreationPaused(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseCashout(_bool: boolean, overrides?: CallOverrides): Promise<void>;

    pauseDepositCreation(
      _bool: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDepositType(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendFeeBalance(overrides?: CallOverrides): Promise<void>;

    setCashoutFee(
      _cashoutFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreateDepositFee(
      _createDepositFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeesWallet(
      _feesWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInvestmentWallet(
      _investmentWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumDepositAmount(
      _maximumDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaximumFirstDepositAmount(
      _maximumFirstDepositAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumFeeBalanceToSend(
      _minimumFeeBalanceToSend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSponsorFee(
      _sponsorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedToken(
      _supportedTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingPeriodOfAffiliateInterests(
      _vestingPeriodOfAffiliateInterests: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedToken(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalDepositTypes(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    totalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      _lastClaimTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositSize(
      _account: string,
      _depositIndex: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositType(
      _depositType: BigNumberish,
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawERC20(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositEntityCreated(address,uint256,uint256,uint256)"(
      account?: null,
      depositType?: null,
      depositSize?: null,
      creationTime?: null
    ): DepositEntityCreatedEventFilter;
    DepositEntityCreated(
      account?: null,
      depositType?: null,
      depositSize?: null,
      creationTime?: null
    ): DepositEntityCreatedEventFilter;

    "DepositTypeDeleted(uint256)"(
      depositType?: null
    ): DepositTypeDeletedEventFilter;
    DepositTypeDeleted(depositType?: null): DepositTypeDeletedEventFilter;

    "DepositTypeUpdated(uint256,uint256,uint256,uint256,uint256)"(
      depositType?: null,
      lockPeriod?: null,
      multiplier?: null,
      interestInterval?: null,
      depositInterestPerPeriod?: null
    ): DepositTypeUpdatedEventFilter;
    DepositTypeUpdated(
      depositType?: null,
      lockPeriod?: null,
      multiplier?: null,
      interestInterval?: null,
      depositInterestPerPeriod?: null
    ): DepositTypeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SentFeeBalance(uint256)"(amount?: null): SentFeeBalanceEventFilter;
    SentFeeBalance(amount?: null): SentFeeBalanceEventFilter;

    "SupportedTokenClaimed(address,uint256,uint256)"(
      account?: null,
      amount?: null,
      claimTime?: null
    ): SupportedTokenClaimedEventFilter;
    SupportedTokenClaimed(
      account?: null,
      amount?: null,
      claimTime?: null
    ): SupportedTokenClaimedEventFilter;

    "SupportedTokenCompounded(address,uint256,uint256,uint256)"(
      account?: null,
      depositIndex?: null,
      amount?: null,
      compoundTime?: null
    ): SupportedTokenCompoundedEventFilter;
    SupportedTokenCompounded(
      account?: null,
      depositIndex?: null,
      amount?: null,
      compoundTime?: null
    ): SupportedTokenCompoundedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_DEPOSITS_PER_ACCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    airdropAffiliateInterest(
      _account: string,
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropAffiliateInterests(
      _accounts: string[],
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropDeposit(
      _account: string,
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdropDeposits(
      _accounts: string[],
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklist(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutAllDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutAllInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutAndCompound(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutAndCompoundAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutDeposit(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashoutInterest(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    compoundAffiliateInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createDepositWithTokens(
      _depositSize: BigNumberish,
      _depositType: BigNumberish,
      _sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewDepositType(
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exemptAddressFromFees(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feesWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCreationTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDepositSizes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDepositedValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInterestAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInterestAvailableAsArray(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLastClaimTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountNextInterestTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTypes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffiliateCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffiliateInterestsAvailability(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAffiliateInterestsAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposit(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCreationTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositInterestAvailable(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositType(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestInterval(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestIntervals(overrides?: CallOverrides): Promise<BigNumber>;

    getIsAccountAffiliateRewardsUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsAccountUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockPeriod(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockPeriods(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultipliers(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUntilAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUntilAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    investmentWallet(overrides?: CallOverrides): Promise<BigNumber>;

    isBlacklisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCashoutPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositCreationPaused(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseCashout(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseDepositCreation(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeDepositType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendFeeBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCashoutFee(
      _cashoutFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCreateDepositFee(
      _createDepositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeesWallet(
      _feesWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInvestmentWallet(
      _investmentWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumDepositAmount(
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaximumFirstDepositAmount(
      _maximumFirstDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumFeeBalanceToSend(
      _minimumFeeBalanceToSend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSponsorFee(
      _sponsorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupportedToken(
      _supportedTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVestingPeriodOfAffiliateInterests(
      _vestingPeriodOfAffiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedToken(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDepositTypes(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDepositsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    totalEarnedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      _lastClaimTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDepositSize(
      _account: string,
      _depositIndex: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDepositType(
      _depositType: BigNumberish,
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_DEPOSITS_PER_ACCOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    airdropAffiliateInterest(
      _account: string,
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropAffiliateInterests(
      _accounts: string[],
      _affiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropDeposit(
      _account: string,
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdropDeposits(
      _accounts: string[],
      _depositType: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklist(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutAllDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutAllInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutAndCompound(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutAndCompoundAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutDeposit(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashoutInterest(
      _depositIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    compoundAffiliateInterests(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createDepositWithTokens(
      _depositSize: BigNumberish,
      _depositType: BigNumberish,
      _sponsor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewDepositType(
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exemptAddressFromFees(
      _address: string,
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feesWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCreationTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDepositSizes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDepositedValue(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountInterestAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountInterestAvailableAsArray(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountLastClaimTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountNextInterestTimes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountTypes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAffiliateCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAffiliateInterestsAvailability(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAffiliateInterestsAvailable(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeposit(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositCreationTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositInterestAvailable(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositType(
      _account: string,
      _depositIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestInterval(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestIntervals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsAccountAffiliateRewardsUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsAccountUnlocked(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockPeriod(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockPeriods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _depositType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultipliers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUntilAccountAffiliateRewardsUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUntilAccountUnlockTime(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDepositsCreated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEarnedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    investmentWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBlacklisted(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCashoutPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDepositCreationPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseCashout(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseDepositCreation(
      _bool: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeDepositType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendFeeBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCashoutFee(
      _cashoutFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCreateDepositFee(
      _createDepositFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeesWallet(
      _feesWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInvestmentWallet(
      _investmentWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumDepositAmount(
      _maximumDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaximumFirstDepositAmount(
      _maximumFirstDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumFeeBalanceToSend(
      _minimumFeeBalanceToSend: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSponsorFee(
      _sponsorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedToken(
      _supportedTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVestingPeriodOfAffiliateInterests(
      _vestingPeriodOfAffiliateInterests: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDepositTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDepositedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDepositsCreated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEarnedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositLastClaimTime(
      _account: string,
      _depositIndex: BigNumberish,
      _lastClaimTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositSize(
      _account: string,
      _depositIndex: BigNumberish,
      _depositSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositType(
      _depositType: BigNumberish,
      _lockPeriod: BigNumberish,
      _minimalDeposit: BigNumberish,
      _multiplier: BigNumberish,
      _interestInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _erc20: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
